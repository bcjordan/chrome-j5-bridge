<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="style/index.css">
  <script src="<%= appBundle %>"></script>
  <script src="test-build-only/jquery-1.7.min.js"></script>
  <script src="test-build-only/soundEffects.js"></script>
  <script src="test-build-only/levels.js"></script>
  <style>
    .description {
      font-size: small;
      color: gray;
      margin-left: 15px;
    }
    .step-note {
      font-size: small;
      color: gray;
      margin-top: -15px;
    }
    pre {
      margin: 0;
    }
    body {
      padding: 20px;
    }

    hr {
      width: 50%;
      margin-top: 25px;
      margin-bottom: 15px;
    }
  </style>
  <title>Physical Computing Plugin Playground</title>
</head>
<body>

<div style="margin:10px; clear:both;"></div>

<div id="visualization-area" style="float:left;"></div>

<textarea id="test-code-area" style="float:left; width:300px; height:300px;"></textarea>
<div style="margin:10px; clear:both;"></div>
<button id="run-button">Run</button>
<button id="reset-button">Reset</button>
<div style="margin:10px; clear:both;"></div>
<p id="delay-display"></p>
<div style="margin:10px; clear:both;"></div>
<button id="previous-level">Previous level</button>
<button id="refresh-button">Refresh</button>
<button id="next-level">Next level</button>
<div style="margin:10px; clear:both;"></div>
<div>Level instructions: <span id="level-instructions" style="font-weight:bold;"></span></div>
<div>Level feedback: <span id="level-feedback" style="font-weight:bold;"></span></div>
<div>
  <h2>Sample function calls:</h2>
  <ul>
    <tt><pre>led.on();</pre></tt> <span class="description">turns LED on</span>
    <tt><pre>led.off();</pre></tt> <span class="description">turns LED off</span>
    <tt><pre>button.on('down', function(){});</pre></tt> <span class="description">do something when button is pressed</span>
    <tt><pre>button.on('up', function(){});</pre></tt> <span class="description">do something when button is released</span>
  </ul>
</div>
<hr>
<div>
  <h1>Steps for setup</h1>
</div>
<div>
  <h2>Step 1: Install Windows/OS X driver for your board</h2>
  <h3>Digital Sandbox v1</h3>
  <ol>
    <li>follow <a href="https://learn.sparkfun.com/tutorials/how-to-install-ftdi-drivers/all">these steps</a> to install the proper board drivers for your operating system.</li>
  </ol>
</div>
<div>
  <h2>Step 2: Upload Firmata sketch to your board (temporary)</h2>
  <p class="step-note">In the future, this may be done on this webpage via a button or automatically.</p>
  <ol>
    <li>Install and open <a href="https://chrome.google.com/webstore/detail/johnny-five-chrome/gjnfhdmcgnaiogffpdoiecllabiabdee?hl=en">Johnny-Five Chrome</a>, select your board, and press "Install Firmata"</li>
  </ol>
</div>
<div>
  <h2>Step 3: Install our Chrome helper App</h2>
  <p class="step-note">For non-dev builds, this will be a one-step install via the Chrome webstore.</p>
  <ol>
    <li>download this <a href="CDOSerialTest-deploy.crx">.crx app file</a> (right click → Save As…) — do not immediately run this file, as Chrome will complain it cannot auto-install this extension from this website</li>
    <li>open the Extensions page in Chrome (OS X: Settings → More Tools → Extensions, Windows: )</li>
    <li>drag the downloaded .crx file from your downloads folder into the Extensions page</li>
  </ol>
</div>
<div>
  <h2>Troubleshooting</h2>
  <ul>
    <li>Working before, but now nothing happening after hitting run? Try reloading the page or re-installing the Chrome extension.</li>
    <li>Other issues? If there are issues getting your board to connect or communicate, try <a href="https://learn.sparkfun.com/tutorials/installing-arduino-ide">installing the full Arduino IDE</a> and testing your board setup works end-to-end.</li>
    <li>Something seem broken? <a href="https://docs.google.com/forms/d/1EcipXjZoAUsvUhnEyVcyXSphiANiujf6deKgPeHLtic/viewform?usp=send_form">Report an issue to Brian</a></li>
  </ul>
</div>

<script>
  var playground = new Playground();

  var demoLevels = window.demoLevels;

  function getParameterByName(name) {
    name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
    var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
      results = regex.exec(location.search);
    return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
  }

  var levelNumber = parseInt(getParameterByName('level') || 1, 10);
  var testLevelToLoad = demoLevels[levelNumber];

  $('#test-code-area').val(testLevelToLoad.solutionCode);
  $('#level-instructions').html(testLevelToLoad.instructions);

  var replacements = {
    "do{": "function(){"
  };

  function isFunction(functionToCheck) {
     var getType = {};
     return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
  }

  function shortHandToApiCalls(shortHandCode) {
    $.each(replacements, function(key, value) {
      shortHandCode = shortHandCode.split(key).join(value);
    });
    return shortHandCode;
  }

  $('#run-button').click(function () {
    var shortHandCode = $('#test-code-area').val();
    var code = shortHandToApiCalls(shortHandCode);

    playground.runCode(code);

    return; // return early, testing PoC

//
//    runCodeWithParams(code, {
//      blinkLED: function() {
//        console.log("Blinking LED");
//      },
//    });
  });

  $('#reset-button').click(function () {
    console.log("Resetting");
  });

  $("#refresh-button").click(function() {
    window.location.reload();
  });

  if (!demoLevels[levelNumber - 1]) {
    $('#previous-level').hide();
  }

  if (!demoLevels[levelNumber + 1]) {
    $('#next-level').hide();
  }

  $('#next-level').click(function() {
    window.location.href = window.location.href.split("?")[0] + "?level=" + (levelNumber + 1);
  });

  $('#previous-level').click(function() {
    window.location.href = window.location.href.split("?")[0] + "?level=" + (levelNumber - 1);
  });
</script>

<% if (liveReloadPort) { %>
<script>
  document.write(
    '<script src="//'
    + window.location.hostname
    + ':<%= liveReloadPort %>/livereload.js"><\/script>'
  );
</script>
<% } %>

</body>
</html>
